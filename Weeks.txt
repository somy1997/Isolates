Week 0 (Winter Vacations) :

Literature Survey - find what different commercial and open source platforms use to provide application level sandboxing

https://medium.com/@zackbloom/isolates-are-the-future-of-cloud-computing-cf7ab91c6142 = blog on isolates
https://www.cloudflare.com/products/cloudflare-workers/ = provides serverless computing architecture without using vm or containers. cloudflare workers support js only. 194 data centres. We are trying to develop something that is language agnostic.

Read the above blog on isolates.

Week 1 :

COMSNETS 2020 : No one's available.
Reading Paper SAND. Read till page 6.
Created the literature survey table on notebook, everything present in Sand.

Week 2 :

// Study the repo https://github.com/hobochild/sandy used to place custom blocks on read calls. Try to block read calls in a similar way. Understand how they are doing.
Completed reading the paper SAND. SAND mentions in chapter 9 at the end of using LWC (light weight contexts).
See if the methods mentioned in http://books.gigatux.nl/mirror/networksecuritytools/0596007949/networkst-CHP-7-SECT-2.html works? Some nuances :
1. The website asks to look at /usr/include/bits/syscall.h but it is actually present at several locations like :
    /usr/include/x86_64-linux-gnu/asm/vsyscall.h
    /usr/include/x86_64-linux-gnu/sys/syscall.h
    /usr/include/x86_64-linux-gnu/bits/syscall.h
    /usr/include/syscall.h
2. For intercept_open method, had to change the Makefile to the one in Abhijit sir's tutorial on LKM. Didn't work anyways. Showed a lot of errors. Tried with both /usr/src/linux-headers-'uname -r' and /lib/modules/'uname -r'
3. For intercept_unlink method, had to use 'sudo grep sys_call_table /boot/System.map-4.15.0-45-generic' which resulted in
    ffffffff81e001e0 R sys_call_table
    ffffffff81e015a0 R ia32_sys_call_table
After correcting some syntax errors the module was create with some warnings but while inserting it was not returning. Also, it was displaying the message 'Killed', may be because it wasn't allowed.

Week 3 : 

Completed watching Jerome's DockerCon video explaing cgroups, ... : https://youtu.be/sK5i-N34im8
Reattempting LKM tutorial
Testing method to work around 'Killed' message, following : https://stackoverflow.com/questions/59812156/how-can-i-override-a-system-call-table-entry-with-my-own-function 
Install vim and cscope : sudo apt-get update && sudo apt-get install vim cscope. Refer http://cscope.sourceforge.net/large_projects.html
The stackoverflow method checks out.
Observation : On grep, the strace method shows only a few system calls but the dmesg command shows a lot of open calls probably because the dmesg command is showing all the open calls including those called by other processes in the system.

Week 4 :

Out of station from Jan 28 to Feb 5

Week 5 :

Refer https://stackoverflow.com/questions/26451729/how-to-get-process-id-name-and-status-using-module . It has mentions of good references for newbies in kernel programming.
asmlinkage = Refer https://stackoverflow.com/questions/10459688/what-is-the-asmlinkage-modifier-meant-for , https://www.quora.com/Linux-Kernel/Linux-Kernel-What-does-asmlinkage-mean-in-the-definition-of-system-calls#
Process ID, name = https://stackoverflow.com/questions/26451729/how-to-get-process-id-name-and-status-using-module
User ID = https://stackoverflow.com/questions/14097389/how-to-get-userid-when-writing-linux-kernel-module
current in kernel = https://stackoverflow.com/questions/12434651/what-is-the-current-in-linux-kernel-source?noredirect=1&lq=1
obj-m = https://stackoverflow.com/questions/57839941/what-is-the-meaning-of-obj-m-in-linux-device-driver-makefile
make variables = https://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_6.html

Used the stackoverflow method to log the calls made to open system call by defining the custom open function.
Printing the process name, process ID and user ID for each call.
Next plan to do the same thing with close, read, write syscalls as well using the same LKM.
Created a generic Makefile to take care of creating and deleting the module and insmodding and rmmodding the module. Created it with an assumption that we'll be creating separate LKMs for each syscall. So, the makefile works such as for example, if open syscall then the folder name should be open and the code should be written in a file inside the same folder named intercept_open.c .
Logs stored in format : 'ISOLATES:<syscall intercepted>,<process name>,<process id>,<user id>c
Logs stored in System Call Logging/dmesglogs.txt